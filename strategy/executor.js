let profit = 0;
let lossCount = 0;
let activeContract = false;
let pingInterval;
let totalTrades = 0;
let winTrades = 0;
let lossTrades = 0;
let lastDigit = null;
let tickHistory = [];
let currentTick = null;
// Vari√°veis espec√≠ficas para estrat√©gia advance
let digitCounts = { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0 };
let tickCount = 0;
let winCount = 0;
// Vari√°veis espec√≠ficas para estrat√©gia maxpro
let virtualLossCount = 0;

function logStatus(p, stake) {
  const winRate = totalTrades > 0 ? ((winTrades / totalTrades) * 100).toFixed(1) : 0;
  console.log(`üü° Total: ${p.toFixed(2)} | Pr√≥xima aposta: ${stake.toFixed(2)} | Losses: ${lossCount} | Win rate: ${winRate}% (${winTrades}/${totalTrades})`);
}

async function executeStrategy(ws, strategy) {
  console.log('üöÄ Iniciando execu√ß√£o da estrat√©gia');

  const {
    name,
    stake,
    prediction,
    martingale,
    martingaleFactor,
    stopLoss,
    takeProfit,
    lossCountLimit,
    maxMartingaleLevel,
    stakeAfterWin,
    filterCondition,
    // Informa√ß√µes de mercado extra√≠das do XML
    market = 'synthetic_index',
    submarket = 'random_index',
    symbol = 'R_100',
    contractType = 'overunder',
    contractTypeCategory = 'DIGITUNDER',
    candleInterval = 60,
    duration = 1,
    duration_unit = 't',
    // Propriedades espec√≠ficas da estrat√©gia advance
    isAdvanceStrategy = false,
    entryPercentage = 8,
    martingaleParts = 2,
    // Propriedades espec√≠ficas da estrat√©gia maxpro
    isMaxproStrategy = false,
    virtualLoss = 1
  } = strategy;

  console.log(`üìà Estrat√©gia: ${name}`);
  console.log(`üéØ Mercado: ${market}/${submarket}/${symbol}`);

  // Mostrar informa√ß√µes espec√≠ficas com base no tipo de contrato
  if (contractType === 'risefall') {
    console.log(`üìä Contrato: ${contractTypeCategory} (Rise/Fall) | Dura√ß√£o: ${duration} ${duration_unit}`);
  } else {
    console.log(`üìä Contrato: ${contractTypeCategory} ${prediction ? `(${prediction})` : ''}`);
  }

  console.log(`‚öôÔ∏è Martingale: ${martingaleFactor}x ap√≥s ${lossCountLimit} loss(es), m√°ximo ${maxMartingaleLevel} n√≠veis`);

  let currentStake = stake;
  let startTime = new Date();

  // Fun√ß√£o para manter a conex√£o ativa
  pingInterval = setInterval(() => {
    if (ws.readyState === ws.OPEN) {
      ws.send(JSON.stringify({ ping: 1 }));
    }
  }, 30000);

  // Fun√ß√£o para mostrar estat√≠sticas da sess√£o
  const showStats = () => {
    const runTime = Math.floor((new Date() - startTime) / 1000);
    const minutes = Math.floor(runTime / 60);
    const seconds = runTime % 60;

    console.log('\nüìä ESTAT√çSTICAS DA SESS√ÉO:');
    console.log(`‚è±Ô∏è Tempo de execu√ß√£o: ${minutes}m ${seconds}s`);
    console.log(`ÔøΩ Laucro total: ${profit.toFixed(2)}`);
    console.log(`üéØ Total de opera√ß√µes: ${totalTrades}`);
    console.log(`‚úÖ Vit√≥rias: ${winTrades} (${totalTrades > 0 ? ((winTrades / totalTrades) * 100).toFixed(1) : 0}%)`);
    console.log(`‚ùå Derrotas: ${lossTrades} (${totalTrades > 0 ? ((lossTrades / totalTrades) * 100).toFixed(1) : 0}%)`);
    console.log(`üíµ Valor inicial: ${stake}`);
    console.log(`üíµ Valor atual: ${currentStake.toFixed(2)}`);
    console.log('');
  };

  // Fun√ß√£o para obter o √∫ltimo d√≠gito do pre√ßo atual
  const getLastDigit = async () => {
    return new Promise((resolve) => {
      ws.send(JSON.stringify({
        ticks: symbol,
        subscribe: 1
      }));

      const handler = (msg) => {
        try {
          const data = JSON.parse(msg);
          if (data.msg_type === 'tick') {
            const price = data.tick.quote;
            const digit = parseInt(price.toString().slice(-1));
            ws.removeListener('message', handler);
            resolve(digit);
          }
        } catch (e) {
          console.error('‚ùå Erro ao processar tick:', e.message);
        }
      };

      ws.on('message', handler);

      // Timeout para evitar espera infinita
      setTimeout(() => {
        ws.removeListener('message', handler);
        resolve(Math.floor(Math.random() * 10)); // Fallback para um d√≠gito aleat√≥rio
      }, 5000);
    });
  };

  // Fun√ß√£o para analisar tend√™ncia baseada nos √∫ltimos ticks
  const analyzeTrend = () => {
    if (tickHistory.length < 20) {
      return null; // N√£o temos dados suficientes
    }
    
    const last20Ticks = tickHistory.slice(-20);
    const maxPrice = Math.max(...last20Ticks);
    const minPrice = Math.min(...last20Ticks);
    
    return { maxPrice, minPrice };
  };

  // Fun√ß√£o para analisar d√≠gitos para a estrat√©gia advance
  const analyzeDigitsForAdvance = () => {
    if (tickCount < 25) {
      console.log(`üìä Coletando dados... ${tickCount}/25 ticks`);
      return null; // Precisa de pelo menos 25 ticks
    }
    
    // Calcular porcentagens dos d√≠gitos 0 e 1
    const totalTicks = Object.values(digitCounts).reduce((sum, count) => sum + count, 0);
    const percentage0 = totalTicks > 0 ? (digitCounts[0] / totalTicks) * 100 : 0;
    const percentage1 = totalTicks > 0 ? (digitCounts[1] / totalTicks) * 100 : 0;
    
    console.log(`üìä An√°lise de d√≠gitos: 0=${percentage0.toFixed(1)}%, 1=${percentage1.toFixed(1)}%`);
    
    // Verificar se as condi√ß√µes de entrada foram atendidas
    if (percentage0 <= entryPercentage && percentage1 <= entryPercentage) {
      console.log(`üéØ Condi√ß√£o de entrada atendida! (0 e 1 <= ${entryPercentage}%)`);
      return 'DIGITOVER'; // Apostar em DIGITOVER quando ambos est√£o baixos
    }
    
    return null; // N√£o fazer trade ainda
  };

  // Fun√ß√£o para determinar o tipo de contrato com base na estrat√©gia
  const determineContractType = async () => {
    // L√≥gica espec√≠fica para estrat√©gia advance
    if (isAdvanceStrategy) {
      return analyzeDigitsForAdvance();
    }

    // L√≥gica espec√≠fica para estrat√©gia maxpro
    if (isMaxproStrategy) {
      // S√≥ fazer trade quando o contador de loss virtual atingir o valor definido
      if (virtualLossCount >= virtualLoss) {
        console.log(`üéØ Condi√ß√£o maxpro atendida! Loss virtual: ${virtualLossCount}/${virtualLoss}`);
        virtualLossCount = 0; // Reset contador ap√≥s fazer trade
        return 'DIGITOVER';
      } else {
        console.log(`üìä Aguardando loss virtual... ${virtualLossCount}/${virtualLoss}`);
        return null; // N√£o fazer trade ainda
      }
    }

    // Para estrat√©gias evenodd com both, precisamos decidir com base no √∫ltimo d√≠gito
    if (contractType === 'evenodd' && contractTypeCategory === 'both') {
      lastDigit = await getLastDigit();
      console.log(`üî¢ √öltimo d√≠gito: ${lastDigit}`);

      // Se o √∫ltimo d√≠gito for √≠mpar, apostamos em par (DIGITEVEN)
      if (lastDigit % 2 === 1) {
        return 'DIGITEVEN';
      }
      // Se o √∫ltimo d√≠gito for par, apostamos em √≠mpar (DIGITODD)
      else {
        return 'DIGITODD';
      }
    }

    // Para estrat√©gias Rise/Fall com an√°lise de tend√™ncia (wise_pro_tendencia)
    if (contractType === 'risefall' && contractTypeCategory === 'both') {
      const trend = analyzeTrend();
      
      if (!trend || !currentTick) {
        console.log('üìä Aguardando dados suficientes para an√°lise de tend√™ncia...');
        return null; // N√£o fazer trade ainda
      }
      
      // L√≥gica da estrat√©gia wise_pro_tendencia:
      // Se o tick atual >= m√°ximo dos √∫ltimos 20 ticks, comprar PUT (contra a tend√™ncia)
      if (currentTick >= trend.maxPrice) {
        console.log(`üìà ALTA M√ÅXIMA detectada (${currentTick} >= ${trend.maxPrice}) - Comprando PUT`);
        return 'PUT';
      }
      // Se o tick atual <= m√≠nimo dos √∫ltimos 20 ticks, comprar CALL (contra a tend√™ncia)
      else if (currentTick <= trend.minPrice) {
        console.log(`üìâ BAIXA M√çNIMA detectada (${currentTick} <= ${trend.minPrice}) - Comprando CALL`);
        return 'CALL';
      }
      
      // Se n√£o est√° em extremo, n√£o fazer trade
      console.log(`üìä Aguardando padr√£o gr√°fico... Atual: ${currentTick}, Max: ${trend.maxPrice}, Min: ${trend.minPrice}`);
      return null;
    }

    // Para estrat√©gias Rise/Fall normais
    if (contractType === 'risefall') {
      return contractTypeCategory; // CALL ou PUT
    }

    // Para outros tipos de contrato, usamos o que est√° definido na estrat√©gia
    return contractTypeCategory;
  };

  const sendTrade = async () => {
    if (activeContract) {
      console.log('‚ö†Ô∏è J√° existe um contrato ativo, aguardando finaliza√ß√£o...');
      return;
    }

    // Determinar o tipo de contrato a ser usado
    const actualContractType = await determineContractType();
    
    // Se n√£o conseguiu determinar o tipo de contrato (ex: aguardando dados), n√£o fazer trade
    if (!actualContractType) {
      activeContract = false;
      // Tentar novamente em 2 segundos
      setTimeout(sendTrade, 2000);
      return;
    }

    activeContract = true;

    // Configurar os par√¢metros do contrato
    const buyParams = {
      amount: currentStake,
      basis: "stake",
      contract_type: actualContractType,
      currency: "USD",
      duration: duration || 1,
      duration_unit: duration_unit || 't',
      symbol: symbol
    };

    // Adicionar barreira (prediction) apenas para contratos que precisam
    if (contractType === 'overunder' || contractType === 'matchesdiffers') {
      buyParams.barrier = prediction;
    }

    const buyReq = {
      buy: 1,
      price: currentStake,
      parameters: buyParams
    };

    console.log(`üõí Enviando ordem: ${actualContractType} ${prediction ? prediction : ''} | Valor: ${currentStake.toFixed(2)}`);
    ws.send(JSON.stringify(buyReq));
  };

  // Iniciar verifica√ß√£o de saldo
  ws.send(JSON.stringify({ balance: 1 }));
  
  // Para estrat√©gias que precisam de an√°lise de ticks, subscrever aos ticks
  if (contractType === 'risefall' && contractTypeCategory === 'both') {
    console.log('üìä Iniciando coleta de dados de ticks para an√°lise de tend√™ncia...');
    ws.send(JSON.stringify({
      ticks: symbol,
      subscribe: 1
    }));
  }
  
  // Para estrat√©gia advance, tamb√©m precisamos coletar ticks para an√°lise de d√≠gitos
  if (isAdvanceStrategy) {
    console.log('üìä Iniciando coleta de dados de d√≠gitos para estrat√©gia advance...');
    ws.send(JSON.stringify({
      ticks: symbol,
      subscribe: 1
    }));
  }
  
  // Para estrat√©gia maxpro, tamb√©m precisamos coletar ticks para an√°lise de loss virtual
  if (isMaxproStrategy) {
    console.log('üìä Iniciando coleta de dados de ticks para estrat√©gia maxpro...');
    ws.send(JSON.stringify({
      ticks: symbol,
      subscribe: 1
    }));
  }

  ws.on('message', (msg) => {
    try {
      const data = JSON.parse(msg);

      // Ignorar mensagens de ping/pong
      if (data.msg_type === 'ping' || data.msg_type === 'pong') {
        return;
      }
      
      // Processar ticks para an√°lise de tend√™ncia
      if (data.msg_type === 'tick') {
        const price = data.tick.quote;
        currentTick = price;
        tickHistory.push(price);
        
        // Manter apenas os √∫ltimos 50 ticks para economizar mem√≥ria
        if (tickHistory.length > 50) {
          tickHistory = tickHistory.slice(-50);
        }
        
        // Para estrat√©gia advance, coletar dados de d√≠gitos
        if (isAdvanceStrategy) {
          const lastDigit = parseInt(price.toString().slice(-1));
          digitCounts[lastDigit]++;
          tickCount++;
          
          // A cada 10 ticks, mostrar estat√≠sticas dos d√≠gitos
          if (tickCount % 10 === 0) {
            const totalTicks = Object.values(digitCounts).reduce((sum, count) => sum + count, 0);
            const percentage0 = totalTicks > 0 ? (digitCounts[0] / totalTicks) * 100 : 0;
            const percentage1 = totalTicks > 0 ? (digitCounts[1] / totalTicks) * 100 : 0;
            console.log(`üìä D√≠gitos coletados: ${tickCount} | 0=${percentage0.toFixed(1)}%, 1=${percentage1.toFixed(1)}%`);
          }
          
          // Verificar se pode fazer trade (ap√≥s coletar dados suficientes)
          if (tickCount >= 25 && !activeContract) {
            const contractType = analyzeDigitsForAdvance();
            if (contractType) {
              sendTrade();
            }
          }
          
          return; // Importante: retornar aqui para n√£o processar outras l√≥gicas
        }
        
        // Para estrat√©gia maxpro, processar sistema de loss virtual
        if (isMaxproStrategy) {
          const lastDigit = parseInt(price.toString().slice(-1));
          
          // L√≥gica do maxpro: se √∫ltimo d√≠gito <= previs√£o, incrementar contador de loss virtual
          if (lastDigit <= prediction) {
            virtualLossCount++;
            console.log(`üìä LOSS VIRTUAL ${virtualLossCount} (d√≠gito ${lastDigit} <= ${prediction})`);
          } else {
            // Reset contador se d√≠gito > previs√£o
            virtualLossCount = 0;
            console.log(`üìä Reset loss virtual (d√≠gito ${lastDigit} > ${prediction})`);
          }
          
          // Verificar se pode fazer trade
          if (virtualLossCount >= virtualLoss && !activeContract) {
            sendTrade();
          }
          
          return; // Importante: retornar aqui para n√£o processar outras l√≥gicas
        }

        // Para estrat√©gias de an√°lise de tend√™ncia, n√£o fazer trade automaticamente
        // O trade ser√° feito quando as condi√ß√µes forem atendidas
        if (contractType === 'risefall' && contractTypeCategory === 'both' && !activeContract) {
          // Verificar se temos dados suficientes e se as condi√ß√µes est√£o atendidas
          const trend = analyzeTrend();
          if (trend && currentTick) {
            if (currentTick >= trend.maxPrice || currentTick <= trend.minPrice) {
              sendTrade();
            }
          }
        }
        
        return;
      }

      // Verificar saldo
      if (data.msg_type === 'balance') {
        console.log(`üí∞ Saldo atual: ${data.balance.balance} ${data.balance.currency}`);

        // Para estrat√©gias normais, iniciar negocia√ß√£o ap√≥s verificar o saldo
        if (!activeContract && !(contractType === 'risefall' && contractTypeCategory === 'both') && !isAdvanceStrategy && !isMaxproStrategy) {
          console.log('üéÆ Iniciando opera√ß√µes...');
          sendTrade();
        } else if (contractType === 'risefall' && contractTypeCategory === 'both') {
          console.log('üìä Aguardando dados de ticks para an√°lise de tend√™ncia...');
        } else if (isAdvanceStrategy) {
          console.log('üìä Aguardando dados de d√≠gitos para estrat√©gia advance...');
        } else if (isMaxproStrategy) {
          console.log('üìä Aguardando dados de ticks para estrat√©gia maxpro...');
        }
        return;
      }

      // Verifica se resposta √© v√°lida de compra
      if (data.msg_type === 'buy') {
        if (data.error) {
          console.error('‚ùå Erro ao comprar:', data.error.message);
          activeContract = false;

          // Tentar novamente ap√≥s um tempo
          setTimeout(sendTrade, 3000);
          return;
        }

        if (data.buy?.contract_id) {
          const contract_id = data.buy.contract_id;
          console.log(`üìù Contrato criado: ID ${contract_id}`);

          // Inscrever para atualiza√ß√µes do contrato
          ws.send(JSON.stringify({
            proposal_open_contract: 1,
            subscribe: 1,
            contract_id: contract_id
          }));
        }
        return;
      }

      // Atualiza√ß√µes do contrato
      if (data.msg_type === 'proposal_open_contract') {
        const contract = data.proposal_open_contract;

        // Contrato finalizado
        if (contract.is_sold) {
          const isWin = parseFloat(contract.profit) >= 0;
          const resultado = isWin ? '‚úÖ WIN' : '‚ùå LOSS';
          console.log(`üìä Resultado: ${resultado} | Lucro: ${contract.profit}`);

          // Atualizar estat√≠sticas
          totalTrades++;
          if (isWin) {
            profit += parseFloat(contract.profit);
            winTrades++;
            
            // L√≥gica espec√≠fica para estrat√©gia advance
            if (isAdvanceStrategy) {
              winCount++;
              lossCount = 0;
              
              // Se atingiu o n√∫mero de vit√≥rias necess√°rias (parcelas de martingale), resetar valor
              if (winCount >= martingaleParts) {
                console.log(`üéØ ${martingaleParts} vit√≥rias atingidas! Resetando valor para inicial.`);
                currentStake = stake;
                winCount = 0;
              }
            } else {
              lossCount = 0;
              currentStake = stakeAfterWin;
            }
          } else {
            profit -= currentStake;
            lossTrades++;
            lossCount++;
            
            // L√≥gica espec√≠fica para estrat√©gia advance
            if (isAdvanceStrategy) {
              winCount = 0; // Reset contador de wins em caso de loss
              
              // Aplicar martingale multiplicando pelo valor absoluto do stake atual
              const newStake = Math.abs(currentStake) * martingaleFactor;
              console.log(`üìà Aplicando martingale advance: ${currentStake.toFixed(2)} ‚Üí ${newStake.toFixed(2)}`);
              currentStake = newStake;
            } else {
              if (lossCount >= lossCountLimit) {
                // Aplicar martingale, mas verificar se n√£o excede o limite m√°ximo
                if (lossCount <= maxMartingaleLevel) {
                  const newStake = currentStake * martingaleFactor;
                  console.log(`üìà Aplicando martingale: ${currentStake.toFixed(2)} ‚Üí ${newStake.toFixed(2)}`);
                  currentStake = newStake;
                } else {
                  console.log(`‚ö†Ô∏è Limite de martingale atingido (${maxMartingaleLevel}). Reiniciando valor.`);
                  currentStake = stake;
                  lossCount = 0;
                }
              }
            }
          }

          logStatus(profit, currentStake);
          activeContract = false;

          // Verificar condi√ß√µes de sa√≠da
          if (profit >= takeProfit) {
            console.log('üéØ META ATINGIDA!');
            showStats();
            clearInterval(pingInterval);
            ws.close();
            process.exit(0);
          } else if (Math.abs(profit) >= stopLoss && profit < 0) {
            console.log('üö® LIMITE DE PERDA ATINGIDO!');
            showStats();
            clearInterval(pingInterval);
            ws.close();
            process.exit(0);
          } else {
            // Mostrar estat√≠sticas a cada 10 opera√ß√µes
            if (totalTrades % 10 === 0) {
              showStats();
            }

            // Aguardar antes da pr√≥xima ordem
            setTimeout(sendTrade, 1000);
          }
        } else {
          // Contrato em andamento - mostrar status apenas se houver mudan√ßa
          if (contract.tick_count) {
            console.log(`‚è≥ Contrato em andamento: ${contract.status} | Tick: ${contract.tick_count || 0}`);
          }
        }
        return;
      }

      // Erro inesperado
      if (data.msg_type === 'error') {
        console.error('‚ùå ERRO da Deriv:', data.error.message);
        activeContract = false;

        // Tentar novamente ap√≥s um tempo, a menos que seja um erro fatal
        if (data.error.code === 'InputValidationFailed') {
          setTimeout(sendTrade, 3000);
        } else {
          clearInterval(pingInterval);
          ws.close();
          process.exit(1);
        }
      }
    } catch (e) {
      console.error('‚ùå Erro ao processar mensagem:', e.message);
    }
  });

  // Configurar manipuladores para interrup√ß√£o do programa
  process.on('SIGINT', () => {
    console.log('\nüõë Programa interrompido pelo usu√°rio');
    showStats();
    clearInterval(pingInterval);
    ws.close();
    process.exit(0);
  });

  // Lidar com fechamento da conex√£o
  ws.on('close', () => {
    console.log('üîå Conex√£o fechada');
    clearInterval(pingInterval);
    process.exit(0);
  });

  // Lidar com erros de conex√£o
  ws.on('error', (error) => {
    console.error('‚ùå Erro de conex√£o:', error.message);
    clearInterval(pingInterval);
    process.exit(1);
  });
}

module.exports = { executeStrategy };